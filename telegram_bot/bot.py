import os
import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import aiohttp
import json

logging.basicConfig(level=logging.INFO)

API_URL = os.getenv('API_URL', 'http://api:8000')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ—Å–ø–ª–µ—è
STYLES = {
    'anime_samurai': {'name': '–ê–Ω–∏–º–µ-—Å–∞–º—É—Ä–∞–π', 'emoji': 'üó°'},
    'cyberpunk': {'name': '–ö–∏–±–µ—Ä–ø–∞–Ω–∫-–≥–µ—Ä–æ–π', 'emoji': 'üëæ'},
    'elf': {'name': '–≠–ª—å—Ñ–∏–π–∫–∞', 'emoji': 'üßù'},
    'demon': {'name': '–î–µ–º–æ–Ω', 'emoji': 'üëπ'},
    'jrpg': {'name': '–ì–µ—Ä–æ–∏–Ω—è JRPG', 'emoji': 'üéÆ'}
}

class UserStates(StatesGroup):
    waiting_for_photo = State()
    waiting_for_style = State()

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ç–≤–æ–µ —Ñ–æ—Ç–æ –≤ –∫—Ä—É—Ç–æ–π –∫–æ—Å–ø–ª–µ–π-–æ–±—Ä–∞–∑.\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ –∏ –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å!",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message_handler(content_types=['photo'])
async def handle_photo(message: types.Message, state: FSMContext):
    await UserStates.waiting_for_style.set()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id
    file_path = await bot.get_file(photo_id)
    photo_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_path.file_path}"
    
    await state.update_data(photo_url=photo_url)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∏–ª—è
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for style_id, style_data in STYLES.items():
        keyboard.add(types.KeyboardButton(f"{style_data['emoji']} {style_data['name']}"))
    
    await message.reply("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –¥–ª—è –∫–æ—Å–ø–ª–µ—è:", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text in [f"{v['emoji']} {v['name']}" for v in STYLES.values()], state=UserStates.waiting_for_style)
async def handle_style(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    photo_url = user_data['photo_url']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å
    selected_style = None
    for style_id, style_data in STYLES.items():
        if message.text == f"{style_data['emoji']} {style_data['name']}":
            selected_style = style_id
            break
    
    if not selected_style:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        await state.finish()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    processing_msg = await message.reply("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—ç—Ç–æ –∑–∞–π–º–µ—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥)...", reply_markup=types.ReplyKeyboardRemove())
    
    async with aiohttp.ClientSession() as session:
        payload = {
            'user_id': message.from_user.id,
            'photo_url': photo_url,
            'style': selected_style,
            'telegram_message_id': processing_msg.message_id
        }
        
        try:
            async with session.post(f"{API_URL}/generate", json=payload) as resp:
                if resp.status != 200:
                    raise Exception(await resp.text())
                
                response = await resp.json()
                if not response.get('success'):
                    raise Exception(response.get('error', 'Unknown error'))
                
        except Exception as e:
            logging.error(f"Generation error: {str(e)}")
            await processing_msg.edit_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
            await state.finish()
            return
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
    await state.finish()

@dp.errors_handler()
async def error_handler(update: types.Update, exception: Exception):
    logging.error(f"Update {update} caused error {exception}")
    return True

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)