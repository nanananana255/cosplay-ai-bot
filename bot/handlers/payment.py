from aiogram import types
from aiogram.dispatcher import FSMContext
from bot.services.database import get_user_generations_count
from bot.services.payment import PaymentService, StripePayment
from bot import dp, Config
from bot.states import UserStates
from bot.keyboards import get_styles_keyboard
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

payment_service = PaymentService()

async def request_photo(message: types.Message):
    await message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ (–ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç)")
    await UserStates.waiting_for_photo.set()

@dp.callback_query_handler(text="generate_more", state="*")
async def handle_generate_more(callback_query: types.CallbackQuery):
    generations_count = get_user_generations_count(callback_query.from_user.id)
    if generations_count >= Config.FREE_GENERATIONS_LIMIT:
        await callback_query.message.answer("üí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        await handle_payment(callback_query.message)
        await UserStates.payment.set()
    else:
        await request_photo(callback_query.message)

async def handle_payment(message: types.Message):
    # TON Connect –≤–∞—Ä–∏–∞–Ω—Ç
    payment_url = await payment_service.create_ton_payment_link(
        message.from_user.id, 
        amount=5.0  # 5 TON
    )
    
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üíé –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ TON", url=payment_url),
        InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π", callback_data="stripe_payment")
    )
    
    await message.answer(
        "üîÆ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(text="stripe_payment")
async def handle_stripe_payment(callback: types.CallbackQuery):
    payment_url = await StripePayment.create_checkout_session(callback.from_user.id)
    await callback.message.answer(
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π", url=payment_url)
        )
    )

@dp.callback_query_handler(lambda c: c.data == "download_hd", state="*")
async def handle_download_hd(callback_query: types.CallbackQuery):
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è HD –≤–µ—Ä—Å–∏–∏
    await callback_query.answer("HD –≤–µ—Ä—Å–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == "share", state="*")
async def handle_share(callback_query: types.CallbackQuery):
    await callback_query.answer("–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!", show_alert=False)
    # –õ–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    ref_link = f"https://t.me/{callback_query.bot.username}?start=ref_{callback_query.from_user.id}"
    await callback_query.message.answer(
        f"üëã –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π! –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
        "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ +1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è!"
    )

# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Stripe (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ API, –Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–¥–µ—Å—å)
@dp.message_handler(content_types=types.ContentType.WEBHOOK, state="*")
async def handle_stripe_webhook(message: types.Message):
    try:
        event = await StripePayment.verify_webhook(
            message.get_payload(),
            message.headers.get('Stripe-Signature')
        )
        
        if event['type'] == 'checkout.session.completed':
            user_id = event['data']['object']['metadata']['user_id']
            # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
            await dp.bot.send_message(
                user_id,
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª—å—à–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π."
            )
            
    except Exception as e:
        print(f"Stripe webhook error: {e}")